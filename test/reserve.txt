import { StyleSheet, Button, Text, View, Modal, TextInput, ScrollView, Alert, Switch } from "react-native";
import { StatusBar, TouchableOpacity } from 'react-native';
import React, { useState } from "react";
import { FAB } from "react-native-paper";

export default function TestScreen() {
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedTab, setSelectedTab] = useState('entrepot');
  
  // √âtats pour Entrep√¥t
  const [entrepotData, setEntrepotData] = useState({
    nom: '',
    adresse: '',
    responsable: '',
    capaciteMax: '',
    type: 'point de collecte'
  });

  // √âtats pour Colis
  const [colisData, setColisData] = useState({
    nom: '',
    types: 'roulant',
    longueur: '',
    largeur: '',
    hauteur: '',
    contenuDeclare: '',
    dateReceptionEntrepot: '',
    dateSortieEntrepot: '',
    priorite: 'standard',
    fragile: false,
    assurance: '',
    stockActuel: '',
    colisEnAttente: '',
    tauxRemplissage: '',
    destination: ''
  });

  // √âtats pour Lot/Palettes
  const [lotData, setLotData] = useState({
    nom: '',
    nombreColis: '',
    description: '',
    destination: ''
  });

  // √âtats pour V√©hicules
  const [vehiculeData, setVehiculeData] = useState({
    nom: '',
    type: 'camion',
    capacite: '',
    statut: 'disponible',
    chauffeur: ''
  });

  const resetForms = () => {
    setEntrepotData({
      nom: '',
      adresse: '',
      responsable: '',
      capaciteMax: '',
      type: 'point de collecte'
    });
    setColisData({
      nom: '',
      types: 'roulant',
      longueur: '',
      largeur: '',
      hauteur: '',
      contenuDeclare: '',
      dateReceptionEntrepot: '',
      dateSortieEntrepot: '',
      priorite: 'standard',
      fragile: false,
      assurance: '',
      stockActuel: '',
      colisEnAttente: '',
      tauxRemplissage: '',
      destination: ''
    });
    setLotData({
      nom: '',
      nombreColis: '',
      description: '',
      destination: ''
    });
    setVehiculeData({
      nom: '',
      type: 'camion',
      capacite: '',
      statut: 'disponible',
      chauffeur: ''
    });
  };

  const handleSave = () => {
    let dataToSave;
    switch (selectedTab) {
      case 'entrepot':
        dataToSave = entrepotData;
        break;
      case 'colis':
        dataToSave = colisData;
        break;
      case 'lot':
        dataToSave = lotData;
        break;
      case 'vehicule':
        dataToSave = vehiculeData;
        break;
    }
    
    Alert.alert('Succ√®s', `${selectedTab} cr√©√© avec succ√®s!`);
    setModalVisible(false);
    resetForms();
  };

  const renderEntrepotForm = () => (
    <View style={styles.formContainer}>
      <Text style={styles.formTitle}>üè¢ Cr√©er un Entrep√¥t</Text>
      
      <Text style={styles.label}>Nom </Text>
      <TextInput
        style={styles.input}
        value={entrepotData.nom}
        onChangeText={(text) => setEntrepotData({...entrepotData, nom: text})}
        placeholder="Nom de l'entrep√¥t"
      />

      <Text style={styles.label}>Adresse </Text>
      <TextInput
        style={styles.input}
        value={entrepotData.adresse}
        onChangeText={(text) => setEntrepotData({...entrepotData, adresse: text})}
        placeholder="Adresse compl√®te"
        multiline
      />

      <Text style={styles.label}>Responsable </Text>
      <TextInput
        style={styles.input}
        value={entrepotData.responsable}
        onChangeText={(text) => setEntrepotData({...entrepotData, responsable: text})}
        placeholder="Nom du responsable"
      />

      <Text style={styles.label}>Capacit√© Max </Text>
      <TextInput
        style={styles.input}
        value={entrepotData.capaciteMax}
        onChangeText={(text) => setEntrepotData({...entrepotData, capaciteMax: text})}
        placeholder="Capacit√© maximale"
        keyboardType="numeric"
      />

      <Text style={styles.label}>Type </Text>
      <View style={styles.pickerContainer}>
        {['point de collecte', 'entrep√¥t central', 'agence mobile'].map((type) => (
          <TouchableOpacity
            key={type}
            style={[
              styles.pickerOption,
              entrepotData.type === type && styles.pickerOptionSelected
            ]}
            onPress={() => setEntrepotData({...entrepotData, type})}
          >
            <Text style={[
              styles.pickerText,
              entrepotData.type === type && styles.pickerTextSelected
            ]}>
              {type}
            </Text>
          </TouchableOpacity>
        ))}
      </View>
    </View>
  );

  const renderColisForm = () => (
    <View style={styles.formContainer}>
      <Text style={styles.formTitle}>üì¶ Cr√©er un Colis</Text>
      
      <Text style={styles.label}>Nom </Text>
      <TextInput
        style={styles.input}
        value={colisData.nom}
        onChangeText={(text) => setColisData({...colisData, nom: text})}
        placeholder="Nom du colis"
      />

      <Text style={styles.label}>Type </Text>
      <View style={styles.pickerContainer}>
        {['roulant', 'mobile', 'fixe'].map((type) => (
          <TouchableOpacity
            key={type}
            style={[
              styles.pickerOption,
              colisData.types === type && styles.pickerOptionSelected
            ]}
            onPress={() => setColisData({...colisData, types: type})}
          >
            <Text style={[
              styles.pickerText,
              colisData.types === type && styles.pickerTextSelected
            ]}>
              {type}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      <Text style={styles.sectionTitle}>Dimensions</Text>
      <View style={styles.dimensionsContainer}>
        <TextInput
          style={[styles.input, styles.dimensionInput]}
          value={colisData.longueur}
          onChangeText={(text) => setColisData({...colisData, longueur: text})}
          placeholder="Longueur (cm)"
          keyboardType="numeric"
        />
        <TextInput
          style={[styles.input, styles.dimensionInput]}
          value={colisData.largeur}
          onChangeText={(text) => setColisData({...colisData, largeur: text})}
          placeholder="Largeur (cm)"
          keyboardType="numeric"
        />
        <TextInput
          style={[styles.input, styles.dimensionInput]}
          value={colisData.hauteur}
          onChangeText={(text) => setColisData({...colisData, hauteur: text})}
          placeholder="Hauteur (cm)"
          keyboardType="numeric"
        />
      </View>

      <Text style={styles.label}>Contenu D√©clar√©</Text>
      <TextInput
        style={styles.input}
        value={colisData.contenuDeclare}
        onChangeText={(text) => setColisData({...colisData, contenuDeclare: text})}
        placeholder="Description du contenu"
        multiline
      />

      <Text style={styles.label}>Date R√©ception Entrep√¥t</Text>
      <TextInput
        style={styles.input}
        value={colisData.dateReceptionEntrepot}
        onChangeText={(text) => setColisData({...colisData, dateReceptionEntrepot: text})}
        placeholder="JJ/MM/AAAA"
      />

      <Text style={styles.label}>Date Sortie Entrep√¥t</Text>
      <TextInput
        style={styles.input}
        value={colisData.dateSortieEntrepot}
        onChangeText={(text) => setColisData({...colisData, dateSortieEntrepot: text})}
        placeholder="JJ/MM/AAAA"
      />

      <Text style={styles.label}>Priorit√© </Text>
      <View style={styles.pickerContainer}>
        {['standard', 'express', 'urgent'].map((priorite) => (
          <TouchableOpacity
            key={priorite}
            style={[
              styles.pickerOption,
              colisData.priorite === priorite && styles.pickerOptionSelected
            ]}
            onPress={() => setColisData({...colisData, priorite})}
          >
            <Text style={[
              styles.pickerText,
              colisData.priorite === priorite && styles.pickerTextSelected
            ]}>
              {priorite}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      <View style={styles.switchContainer}>
        <Text style={styles.label}>Fragile</Text>
        <Switch
          value={colisData.fragile}
          onValueChange={(value) => setColisData({...colisData, fragile: value})}
        />
      </View>

      <Text style={styles.label}>Assurance (optionnelle)</Text>
      <TextInput
        style={styles.input}
        value={colisData.assurance}
        onChangeText={(text) => setColisData({...colisData, assurance: text})}
        placeholder="Montant de l'assurance"
        keyboardType="numeric"
      />

      <Text style={styles.label}>Stock Actuel</Text>
      <TextInput
        style={styles.input}
        value={colisData.stockActuel}
        onChangeText={(text) => setColisData({...colisData, stockActuel: text})}
        placeholder="Nombre en stock"
        keyboardType="numeric"
      />

      <Text style={styles.label}>Colis en Attente</Text>
      <TextInput
        style={styles.input}
        value={colisData.colisEnAttente}
        onChangeText={(text) => setColisData({...colisData, colisEnAttente: text})}
        placeholder="Nombre en attente"
        keyboardType="numeric"
      />

      <Text style={styles.label}>Destination</Text>
      <TextInput
        style={styles.input}
        value={colisData.destination}
        onChangeText={(text) => setColisData({...colisData, destination: text})}
        placeholder="Destination finale"
      />
    </View>
  );

  const renderLotForm = () => (
    <View style={styles.formContainer}>
      <Text style={styles.formTitle}>üì¶ Cr√©er un Lot/Palette</Text>
      
      <Text style={styles.label}>Nom du Lot </Text>
      <TextInput
        style={styles.input}
        value={lotData.nom}
        onChangeText={(text) => setLotData({...lotData, nom: text})}
        placeholder="Nom du lot"
      />

      <Text style={styles.label}>Nombre de Colis </Text>
      <TextInput
        style={styles.input}
        value={lotData.nombreColis}
        onChangeText={(text) => setLotData({...lotData, nombreColis: text})}
        placeholder="Nombre de colis dans le lot"
        keyboardType="numeric"
      />

      <Text style={styles.label}>Description</Text>
      <TextInput
        style={styles.input}
        value={lotData.description}
        onChangeText={(text) => setLotData({...lotData, description: text})}
        placeholder="Description du lot"
        multiline
      />

      <Text style={styles.label}>Destination </Text>
      <TextInput
        style={styles.input}
        value={lotData.destination}
        onChangeText={(text) => setLotData({...lotData, destination: text})}
        placeholder="Destination du lot"
      />
    </View>
  );

  const renderVehiculeForm = () => (
    <View style={styles.formContainer}>
      <Text style={styles.formTitle}>üöö Cr√©er un V√©hicule</Text>
      
      <Text style={styles.label}>Nom/Immatriculation </Text>
      <TextInput
        style={styles.input}
        value={vehiculeData.nom}
        onChangeText={(text) => setVehiculeData({...vehiculeData, nom: text})}
        placeholder="Nom ou immatriculation"
      />

      <Text style={styles.label}>Type </Text>
      <View style={styles.pickerContainer}>
        {['camion', 'camionnette', 'v√©lo', 'moto'].map((type) => (
          <TouchableOpacity
            key={type}
            style={[
              styles.pickerOption,
              vehiculeData.type === type && styles.pickerOptionSelected
            ]}
            onPress={() => setVehiculeData({...vehiculeData, type})}
          >
            <Text style={[
              styles.pickerText,
              vehiculeData.type === type && styles.pickerTextSelected
            ]}>
              {type}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      <Text style={styles.label}>Capacit√©</Text>
      <TextInput
        style={styles.input}
        value={vehiculeData.capacite}
        onChangeText={(text) => setVehiculeData({...vehiculeData, capacite: text})}
        placeholder="Capacit√© (kg ou m¬≥)"
        keyboardType="numeric"
      />

      <Text style={styles.label}>Statut </Text>
      <View style={styles.pickerContainer}>
        {['disponible', 'en cours', 'maintenance'].map((statut) => (
          <TouchableOpacity
            key={statut}
            style={[
              styles.pickerOption,
              vehiculeData.statut === statut && styles.pickerOptionSelected
            ]}
            onPress={() => setVehiculeData({...vehiculeData, statut})}
          >
            <Text style={[
              styles.pickerText,
              vehiculeData.statut === statut && styles.pickerTextSelected
            ]}>
              {statut}
            </Text>
          </TouchableOpacity>
        ))}
      </View>

      <Text style={styles.label}>Chauffeur</Text>
      <TextInput
        style={styles.input}
        value={vehiculeData.chauffeur}
        onChangeText={(text) => setVehiculeData({...vehiculeData, chauffeur: text})}
        placeholder="Nom du chauffeur"
      />
    </View>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Hello World (Test)</Text>
      <Text style={styles.subtitle}>This is the first page for test your app.</Text>
      <View style={styles.buttonContainer}>
        <Button title="Test" onPress={() => console.log('Test est cliqu√©')} />
      </View>
      
      <FAB
        style={styles.fab}
        icon="plus"
        onPress={() => setModalVisible(true)}
      />

      <Modal
        animationType="slide"
        transparent={false}
        visible={modalVisible}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Cr√©er une Logistique</Text>
            <TouchableOpacity
              style={styles.closeButton}
              onPress={() => setModalVisible(false)}
            >
              <Text style={styles.closeButtonText}>‚úï</Text>
            </TouchableOpacity>
          </View>

          {/* Tabs */}
          <View style={styles.tabContainer}>
            <TouchableOpacity
              style={[styles.tab, selectedTab === 'entrepot' && styles.activeTab]}
              onPress={() => setSelectedTab('entrepot')}
            >
              <Text style={[styles.tabText, selectedTab === 'entrepot' && styles.activeTabText]}>
                üè¢ Entrep√¥t
              </Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.tab, selectedTab === 'colis' && styles.activeTab]}
              onPress={() => setSelectedTab('colis')}
            >
              <Text style={[styles.tabText, selectedTab === 'colis' && styles.activeTabText]}>
                üì¶ Colis
              </Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.tab, selectedTab === 'lot' && styles.activeTab]}
              onPress={() => setSelectedTab('lot')}
            >
              <Text style={[styles.tabText, selectedTab === 'lot' && styles.activeTabText]}>
                üì¶ Lot
              </Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.tab, selectedTab === 'vehicule' && styles.activeTab]}
              onPress={() => setSelectedTab('vehicule')}
            >
              <Text style={[styles.tabText, selectedTab === 'vehicule' && styles.activeTabText]}>
                üöö V√©hicule
              </Text>
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalContent}>
            {selectedTab === 'entrepot' && renderEntrepotForm()}
            {selectedTab === 'colis' && renderColisForm()}
            {selectedTab === 'lot' && renderLotForm()}
            {selectedTab === 'vehicule' && renderVehiculeForm()}
          </ScrollView>

          <View style={styles.modalFooter}>
            <TouchableOpacity
              style={styles.cancelButton}
              onPress={() => setModalVisible(false)}
            >
              <Text style={styles.cancelButtonText}>Annuler</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.saveButton}
              onPress={handleSave}
            >
              <Text style={styles.saveButtonText}>Enregistrer</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
    padding: 24,
    justifyContent: "center",
    maxWidth: 960,
    marginHorizontal: "auto",
  },
  title: {
    fontSize: 50,
    fontWeight: "bold",
  },
  subtitle: {
    fontSize: 36,
    color: "#38434D",
  },
  buttonContainer: {
    alignSelf: 'center',
    width: '50%',
    color: '#555',
    fontWeight: 'bold',
    margin: 10,
    backgroundColor: 'orange',
    padding: 15,
    borderRadius: 10,
    alignItems: 'center',
  },
  fab: {
    position: "absolute",
    right: 16,
    bottom: 16,
  },
  
  // Styles du Modal
  modalContainer: {
    flex: 1,
    backgroundColor: '#fff',
  },
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
    backgroundColor: '#f8f9fa',
  },
  modalTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
  },
  closeButton: {
    padding: 10,
  },
  closeButtonText: {
    fontSize: 24,
    color: '#666',
  },
  
  // Styles des Tabs
  tabContainer: {
    flexDirection: 'row',
    backgroundColor: '#f8f9fa',
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  tab: {
    flex: 1,
    paddingVertical: 15,
    alignItems: 'center',
    borderBottomWidth: 2,
    borderBottomColor: 'transparent',
  },
  activeTab: {
    borderBottomColor: '#FF6B00',
    backgroundColor: '#fff',
  },
  tabText: {
    fontSize: 14,
    color: '#666',
    fontWeight: '500',
  },
  activeTabText: {
    color: '#FF6B00',
    fontWeight: 'bold',
  },
  
  // Styles du contenu
  modalContent: {
    flex: 1,
    padding: 20,
  },
  formContainer: {
    paddingBottom: 20,
  },
  formTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 20,
    color: '#333',
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginTop: 15,
    marginBottom: 10,
    color: '#333',
  },
  label: {
    fontSize: 16,
    fontWeight: '500',
    marginBottom: 5,
    color: '#333',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    padding: 12,
    marginBottom: 15,
    fontSize: 16,
    backgroundColor: '#fff',
  },
  
  // Dimensions container
  dimensionsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 15,
  },
  dimensionInput: {
    flex: 1,
    marginRight: 10,
    marginBottom: 0,
  },
  
  // Picker styles
  pickerContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 15,
  },
  pickerOption: {
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: '#ddd',
    marginRight: 10,
    marginBottom: 10,
    backgroundColor: '#f8f9fa',
  },
  pickerOptionSelected: {
    backgroundColor: '#FF6B00',
  },
  pickerText: {
    fontSize: 14,
    color: '#666',
  },
  pickerTextSelected: {
    color: '#fff',
    fontWeight: 'bold',
  },
  
  // Switch container
  switchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 15,
  },
  
  // Footer
  modalFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 20,
    borderTopWidth: 1,
    borderTopColor: '#eee',
    backgroundColor: '#f8f9fa',
  },
  cancelButton: {
    flex: 1,
    padding: 15,
    alignItems: 'center',
    marginRight: 10,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#ddd',
    backgroundColor: '#fff',
  },
  cancelButtonText: {
    fontSize: 16,
    color: '#666',
    fontWeight: '500',
  },
  saveButton: {
    flex: 1,
    padding: 15,
    alignItems: 'center',
    marginLeft: 10,
    borderRadius: 8,
    backgroundColor: '#FF6B00',
  },
  saveButtonText: {
    fontSize: 16,
    color: '#fff',
    fontWeight: 'bold',
  },
});