

import { StyleSheet,Button, Text, View } from "react-native";
import { ScrollView, StatusBar, TouchableOpacity, Image } from 'react-native';

export default function TestScreen() {
  return (
    <View style={styles.container}>
        
      <View style={styles.main}>
        <Text style={styles.title}>Hello World (Test)</Text>
        <Text style={styles.subtitle}>This is the first page for test your app.</Text>
        <View style={styles.buttonContainer}>
            <Button title="Test" onPress={() => console.log('Test est cliqu√©')} />
        </View>

      </View>
    </View>
  );
} 

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
    padding: 24,
  },
  main: {
    flex: 1,
    justifyContent: "center",
    maxWidth: 960,
    marginHorizontal: "auto",
  },
  title: {
    fontSize: 50,
    fontWeight: "bold",
  },
  subtitle: {
    fontSize: 36,
    color: "#38434D",
  },
  buttonContainer: {
    alignSelf: 'center',
    width: '50%',
    color: '#555',
    fontWeight: 'bold',
    margin: 10,
    backgroundColor: 'orange',
    padding: 15,
    borderRadius: 10,
    alignItems: 'center',
  },

});















// le code du context notification qui est dans le dossier d'origine est le suivant :

import type React from "react"
import { createContext, useState, useContext, useEffect } from "react"
import AsyncStorage from "@react-native-async-storage/async-storage"
import { usePackages } from "./PackageContext"

export interface Notification {
  id: string
  title: string
  message: string
  type: "info" | "success" | "warning" | "error"
  read: boolean
  createdAt: Date
  packageId?: string
  relayPointId?: string
}

interface NotificationContextType {
  notifications: Notification[]
  unreadCount: number
  addNotification: (notification: Omit<Notification, "id" | "read" | "createdAt">) => void
  markAsRead: (id: string) => void
  markAllAsRead: () => void
  clearNotifications: () => void
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined)

export const useNotifications = () => {
  const context = useContext(NotificationContext)
  if (!context) {
    throw new Error("useNotifications must be used within a NotificationProvider")
  }
  return context
}

export const NotificationProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [notifications, setNotifications] = useState<Notification[]>([])
  const { packages } = usePackages()

  // Charger les notifications depuis le stockage local au d√©marrage
  useEffect(() => {
    const loadNotifications = async () => {
      try {
        const storedNotifications = await AsyncStorage.getItem("notifications")
        if (storedNotifications) {
          const parsedNotifications = JSON.parse(storedNotifications)
          // Convertir les cha√Ænes de date en objets Date
          const formattedNotifications = parsedNotifications.map((notif: any) => ({
            ...notif,
            createdAt: new Date(notif.createdAt),
          }))
          setNotifications(formattedNotifications)
        }
      } catch (error) {
        console.error("Failed to load notifications", error)
      }
    }

    loadNotifications()
  }, [])

  // Surveiller les changements de statut des colis pour cr√©er des notifications
  useEffect(() => {
    // Cette logique serait normalement g√©r√©e par un backend avec des webhooks ou des push notifications
    // Ici, nous simulons ce comportement pour la d√©monstration
  }, [packages])

  // Sauvegarder les notifications dans le stockage local √† chaque changement
  useEffect(() => {
    const saveNotifications = async () => {
      try {
        await AsyncStorage.setItem("notifications", JSON.stringify(notifications))
      } catch (error) {
        console.error("Failed to save notifications", error)
      }
    }

    if (notifications.length > 0) {
      saveNotifications()
    }
  }, [notifications])

  const addNotification = (notificationData: Omit<Notification, "id" | "read" | "createdAt">) => {
    const newNotification: Notification = {
      ...notificationData,
      id: Math.random().toString(36).substring(2, 9),
      read: false,
      createdAt: new Date(),
    }

    setNotifications((prev) => [newNotification, ...prev])

    // Dans une vraie application, vous enverriez une notification push ici
    console.log("Nouvelle notification:", newNotification.title)
  }

  const markAsRead = (id: string) => {
    setNotifications((prev) =>
      prev.map((notification) => (notification.id === id ? { ...notification, read: true } : notification)),
    )
  }

  const markAllAsRead = () => {
    setNotifications((prev) => prev.map((notification) => ({ ...notification, read: true })))
  }

  const clearNotifications = () => {
    setNotifications([])
    AsyncStorage.removeItem("notifications")
  }

  const unreadCount = notifications.filter((notification) => !notification.read).length

  return (
    <NotificationContext.Provider
      value={{
        notifications,
        unreadCount,
        addNotification,
        markAsRead,
        markAllAsRead,
        clearNotifications,
      }}
    >
      {children}
    </NotificationContext.Provider>
  )
}















Cr√©er une application mobile intuitive et fluide avec React Native Expo pour la gestion des colis n√©cessite une bonne structure, une exp√©rience utilisateur pens√©e, et une architecture propre. Voici un guide √©tape par √©tape pour concevoir cette application, en abordant chaque fonctionnalit√© que tu as list√©e :

---

### üîß Outils n√©cessaires

* React Native (via Expo)
* TypeScript (optionnel mais recommand√©)
* React Navigation
* React Native Maps
* Firebase ou Supabase pour backend
* Zustand ou Redux pour gestion d‚Äô√©tat
* Tailwind CSS via NativeWind ou StyleSheet
* Lottie ou React Native Animatable pour les animations fluides

---

## üß± Structure g√©n√©rale de l‚Äôapp

### 1. Authentification (client simple ou agence)

* Choix du r√¥le √† la connexion (client simple ou agence)
* Auth via e-mail/password ou OTP

### 2. Navigation

* TabNavigator (Accueil, Envoyer, R√©ception, Carte, Profil)
* StackNavigator pour les d√©tails

---

## üéØ Fonctionnalit√©s principales

### üìç Afficher les points relais

* Carte avec markers via react-native-maps
* Liste des points avec infos essentielles (nom, disponibilit√©, horaires)
* Bouton "Voir sur la carte" ‚Üí navigue vers une map centr√©e

```tsx
<Button title="Voir sur la carte" onPress={() => navigation.navigate("Carte", { idPointRelais })} />
```

### üí° UX Design : Couleurs

* Couleurs chaudes pour les actions (orange/rouge pour "envoyer")
* Couleurs calmes (bleu/vert) pour la r√©ception
* Couleurs d√©satur√©es pour les points relais d√©sactiv√©s
* Ic√¥nes explicites (üì¶ pour colis, ‚è∞ pour horaires, üìç pour localisation)

---

### üìã D√©tail d‚Äôun point relais (Profil)

Contenu :

* Nom
* Adresse
* Horaires d‚Äôouverture
* Carte (mini-map)
* Image du lieu
* Statistiques (nb de colis trait√©s)
* Bouton pour changer de point relais si d√©sactiv√©

---

### üîÑ Deux types d‚Äôutilisateurs

* Client :

  * Envoie/re√ßoit des colis
  * Choisit point relais
* Agence :

  * Cr√©e/active/d√©sactive des points relais
  * Acc√®de aux statistiques

---

### üì¶ Gestion des colis

* Formulaire : poids, volume, description
* √Ä l‚Äôenvoi ‚Üí g√©n√©rer un identifiant unique (UUID ou bas√© sur timestamp + user ID)

```ts
import { v4 as uuidv4 } from 'uuid'
const colisId = uuidv4()
```

* Associer le colis au client et au point relais

---

## üéõÔ∏è Interface fluide

* Utiliser FlatList avec optimisations
* Skeleton loaders pendant le chargement
* Transitions anim√©es entre les vues
* Retours haptiques sur les boutons

---

## ‚úÖ R√©sum√© des composants React √† cr√©er

* HomeScreen
* LoginScreen
* ChoixR√¥leScreen
* EnvoyerColisScreen
* RecevoirColisScreen
* CarteScreen (avec react-native-maps)
* PointRelaisDetailsScreen
* ProfilUtilisateurScreen
* AgenceDashboardScreen (si agence)



Souhaites-tu que je te g√©n√®re une base de projet Expo + quelques √©crans pour d√©marrer rapidement ?





// la theme.ts est le fichier de configuration de la th√®me de l'application

import { MD3LightTheme, configureFonts } from "react-native-paper"

// D√©finir des tailles de police plus grandes pour l'accessibilit√©
const fontConfig = {
  fontFamily: "System",
  fontWeights: {
    regular: "400",
    medium: "500",
    bold: "700",
  },
  sizes: {
    small: 14,
    medium: 16,
    large: 18,
    extraLarge: 22,
  },
}

export const theme = {
  ...MD3LightTheme,
  colors: {
    ...MD3LightTheme.colors,
    primary: "#FF6B00",
    secondary: "#2196F3",
    tertiary: "#4CAF50",
    error: "#FF3B30",
    background: "#F5F5F5",
    surface: "#FFFFFF",
    // Am√©liorer le contraste pour l'accessibilit√©
    onBackground: "#121212",
    onSurface: "#121212",
    onPrimary: "#FFFFFF",
    onSecondary: "#FFFFFF",
    onTertiary: "#FFFFFF",
    onError: "#FFFFFF",
  },
  fonts: configureFonts({ config: fontConfig }),
  // Augmenter la taille des √©l√©ments interactifs pour l'accessibilit√©
  roundness: 8,
}
 
























Build details: https://expo.dev/accounts/docteurandy/projects/pick-and-drop/builds/aafbf6c9-275b-44f1-b1be-e4eaa7f90212

Waiting for build to complete. You can press Ctrl+C to exit.
‚àö Build finished

ü§ñ Android app:
https://expo.dev/artifacts/eas/n7B2Teph9opa94fN5kQLCb.aab





| Package                          | Version install√©e | Version requise |
| -------------------------------- | ----------------- | --------------- |
| `@react-native-community/slider` | 4.5.6             | 4.5.5           |
| `@react-native-picker/picker`    | 2.11.0            | 2.9.0           |
| `lottie-react-native`            | 7.2.2             | 7.1.0           |
| `react-native`                   | 0.76.7            | 0.76.9          |
| `react-native-pager-view`        | 6.7.1             | 6.5.1           |





    "react-native-web": "~0.19.13",
    "react-native-webview": "13.12.5",























const translations = {
    fr: {
      // Navigation
      profile: 'Profil',
      send: 'Envoyer',
      track: 'Suivi',
      receive: 'Recevoir',
      
      // Profile Screen
      preferredRelayPoint: 'Point relais pr√©f√©r√©',
      selectRelayPoint: 'S√©lectionnez votre point relais pr√©f√©r√©:',
      noRelaySelected: 'Aucun point relais s√©lectionn√©',
      relayPointHelp: 'Ce point relais sera utilis√© par d√©faut pour vos envois et r√©ceptions de colis.',
      
      // Account Settings
      accountSettings: 'Param√®tres du compte',
      editProfile: 'Modifier le profil',
      changePassword: 'Changer le mot de passe',
      notifications: 'Notifications',
      
      // Preferences
      preferences: 'Pr√©f√©rences',
      language: 'Langue',
      theme: 'Th√®me',
      
      // Help & Support
      helpSupport: 'Aide et support',
      helpCenter: 'Centre d\'aide',
      contactUs: 'Contactez-nous',
      about: '√Ä propos',
      
      // Buttons
      logout: 'D√©connexion',
      cancel: 'Annuler',
      save: 'Sauvegarder',
      close: 'Fermer',
      change: 'Changer',
      
      // Themes
      lightTheme: 'Clair',
      darkTheme: 'Sombre',
      autoTheme: 'Automatique',
      
      // Languages
      french: 'Fran√ßais',
      english: 'English',
      spanish: 'Espa√±ol',
      german: 'Deutsch',
      
      // Messages
      success: 'Succ√®s',
      error: 'Erreur',
      logoutConfirm: '√ätes-vous s√ªr de vouloir vous d√©connecter ?',
      profileUpdated: 'Votre profil a √©t√© mis √† jour avec succ√®s',
      passwordChanged: 'Votre mot de passe a √©t√© chang√© avec succ√®s',
      languageUpdated: 'La langue a √©t√© mise √† jour',
      themeUpdated: 'Le th√®me a √©t√© mis √† jour',
      relayPointUpdated: 'Votre point relais pr√©f√©r√© a √©t√© mis √† jour',
      
      // Form Fields
      fullName: 'Nom complet',
      email: 'Email',
      phone: 'T√©l√©phone',
      currentPassword: 'Mot de passe actuel',
      newPassword: 'Nouveau mot de passe',
      confirmPassword: 'Confirmer le nouveau mot de passe',
      
      // Validation
      passwordMismatch: 'Les mots de passe ne correspondent pas',
      passwordTooShort: 'Le mot de passe doit contenir au moins 6 caract√®res',
      
      // Contact
      supportEmail: 'support@votreapp.com',
      supportPhone: '+33 1 23 45 67 89',
      businessHours: 'Lun-Ven: 9h-18h',
      
      // About
      appDescription: 'DeliveryApp est votre application de confiance pour l\'envoi et la r√©ception de colis.',
      networkDescription: 'Nous facilitons vos envois gr√¢ce √† notre r√©seau de points relais partenaires dans toute la France.',
      version: 'Version',
      developedBy: 'D√©velopp√© par',
      termsOfService: 'Conditions d\'utilisation',
      privacyPolicy: 'Politique de confidentialit√©',
      
      // User Types
      client: 'Client',
      agency: 'Agence',
    },
    
    en: {
      // Navigation
      profile: 'Profile',
      send: 'Send',
      track: 'Track',
      receive: 'Receive',
      
      // Profile Screen
      preferredRelayPoint: 'Preferred Relay Point',
      selectRelayPoint: 'Select your preferred relay point:',
      noRelaySelected: 'No relay point selected',
      relayPointHelp: 'This relay point will be used by default for your shipments and package receipts.',
      
      // Account Settings
      accountSettings: 'Account Settings',
      editProfile: 'Edit Profile',
      changePassword: 'Change Password',
      notifications: 'Notifications',
      
      // Preferences
      preferences: 'Preferences',
      language: 'Language',
      theme: 'Theme',
      
      // Help & Support
      helpSupport: 'Help & Support',
      helpCenter: 'Help Center',
      contactUs: 'Contact Us',
      about: 'About',
      
      // Buttons
      logout: 'Logout',
      cancel: 'Cancel',
      save: 'Save',
      close: 'Close',
      change: 'Change',
      
      // Themes
      lightTheme: 'Light',
      darkTheme: 'Dark',
      autoTheme: 'Auto',
      
      // Languages
      french: 'Fran√ßais',
      english: 'English',
      spanish: 'Espa√±ol',
      german: 'Deutsch',
      
      // Messages
      success: 'Success',
      error: 'Error',
      logoutConfirm: 'Are you sure you want to logout?',
      profileUpdated: 'Your profile has been updated successfully',
      passwordChanged: 'Your password has been changed successfully',
      languageUpdated: 'Language has been updated',
      themeUpdated: 'Theme has been updated',
      relayPointUpdated: 'Your preferred relay point has been updated',
      
      // Form Fields
      fullName: 'Full Name',
      email: 'Email',
      phone: 'Phone',
      currentPassword: 'Current Password',
      newPassword: 'New Password',
      confirmPassword: 'Confirm New Password',
      
      // Validation
      passwordMismatch: 'Passwords do not match',
      passwordTooShort: 'Password must be at least 6 characters long',
      
      // Contact
      supportEmail: 'support@yourapp.com',
      supportPhone: '+33 1 23 45 67 89',
      businessHours: 'Mon-Fri: 9am-6pm',
      
      // About
      appDescription: 'DeliveryApp is your trusted application for sending and receiving packages.',
      networkDescription: 'We facilitate your shipments through our network of partner relay points throughout France.',
      version: 'Version',
      developedBy: 'Developed by',
      termsOfService: 'Terms of Service',
      privacyPolicy: 'Privacy Policy',
      
      // User Types
      client: 'Client',
      agency: 'Agency',
    },
    
    es: {
      // Navigation
      profile: 'Perfil',
      send: 'Enviar',
      track: 'Seguir',
      receive: 'Recibir',
      
      // Profile Screen
      preferredRelayPoint: 'Punto de Relevo Preferido',
      selectRelayPoint: 'Selecciona tu punto de relevo preferido:',
      noRelaySelected: 'Ning√∫n punto de relevo seleccionado',
      relayPointHelp: 'Este punto de relevo se utilizar√° por defecto para tus env√≠os y recepciones de paquetes.',
      
      // Account Settings
      accountSettings: 'Configuraci√≥n de Cuenta',
      editProfile: 'Editar Perfil',
      changePassword: 'Cambiar Contrase√±a',
      notifications: 'Notificaciones',
      
      // Preferences
      preferences: 'Preferencias',
      language: 'Idioma',
      theme: 'Tema',
      
      // Help & Support
      helpSupport: 'Ayuda y Soporte',
      helpCenter: 'Centro de Ayuda',
      contactUs: 'Cont√°ctanos',
      about: 'Acerca de',
      
      // Buttons
      logout: 'Cerrar Sesi√≥n',
      cancel: 'Cancelar',
      save: 'Guardar',
      close: 'Cerrar',
      change: 'Cambiar',
      
      // Themes
      lightTheme: 'Claro',
      darkTheme: 'Oscuro',
      autoTheme: 'Autom√°tico',
      
      // Languages
      french: 'Fran√ßais',
      english: 'English',
      spanish: 'Espa√±ol',
      german: 'Deutsch',
      
      // Messages
      success: '√âxito',
      error: 'Error',
      logoutConfirm: '¬øEst√°s seguro de que quieres cerrar sesi√≥n?',
      profileUpdated: 'Tu perfil ha sido actualizado exitosamente',
      passwordChanged: 'Tu contrase√±a ha sido cambiada exitosamente',
      languageUpdated: 'El idioma ha sido actualizado',
      themeUpdated: 'El tema ha sido actualizado',
      relayPointUpdated: 'Tu punto de relevo preferido ha sido actualizado',
      
      // Form Fields
      fullName: 'Nombre Completo',
      email: 'Correo',
      phone: 'Tel√©fono',
      currentPassword: 'Contrase√±a Actual',
      newPassword: 'Nueva Contrase√±a',
      confirmPassword: 'Confirmar Nueva Contrase√±a',
      
      // Validation
      passwordMismatch: 'Las contrase√±as no coinciden',
      passwordTooShort: 'La contrase√±a debe tener al menos 6 caracteres',
      
      // Contact
      supportEmail: 'soporte@tuapp.com',
      supportPhone: '+33 1 23 45 67 89',
      businessHours: 'Lun-Vie: 9h-18h',
      
      // About
      appDescription: 'DeliveryApp es tu aplicaci√≥n de confianza para enviar y recibir paquetes.',
      networkDescription: 'Facilitamos tus env√≠os a trav√©s de nuestra red de puntos de relevo asociados en toda Francia.',
      version: 'Versi√≥n',
      developedBy: 'Desarrollado por',
      termsOfService: 'T√©rminos de Servicio',
      privacyPolicy: 'Pol√≠tica de Privacidad',
      
      // User Types
      client: 'Cliente',
      agency: 'Agencia',
    },
    
    de: {
      // Navigation
      profile: 'Profil',
      send: 'Senden',
      track: 'Verfolgen',
      receive: 'Empfangen',
      
      // Profile Screen
      preferredRelayPoint: 'Bevorzugter Relaispunkt',
      selectRelayPoint: 'W√§hlen Sie Ihren bevorzugten Relaispunkt:',
      noRelaySelected: 'Kein Relaispunkt ausgew√§hlt',
      relayPointHelp: 'Dieser Relaispunkt wird standardm√§√üig f√ºr Ihre Sendungen und Paketzustellungen verwendet.',
      
      // Account Settings
      accountSettings: 'Kontoeinstellungen',
      editProfile: 'Profil bearbeiten',
      changePassword: 'Passwort √§ndern',
      notifications: 'Benachrichtigungen',
      
      // Preferences
      preferences: 'Einstellungen',
      language: 'Sprache',
      theme: 'Theme',
      
      // Help & Support
      helpSupport: 'Hilfe & Support',
      helpCenter: 'Hilfezentrum',
      contactUs: 'Kontaktiere uns',
      about: '√úber',
      
      // Buttons
      logout: 'Abmelden',
      cancel: 'Abbrechen',
      save: 'Speichern',
      close: 'Schlie√üen',
      change: '√Ñndern',
      
      // Themes
      lightTheme: 'Hell',
      darkTheme: 'Dunkel',
      autoTheme: 'Auto',
      
      // Languages
      french: 'Fran√ßais',
      english: 'English',
      spanish: 'Espa√±ol',
      german: 'Deutsch',
      
      // Messages
      success: 'Erfolg',
      error: 'Fehler',
      logoutConfirm: 'Sind Sie sicher, dass Sie sich abmelden m√∂chten?',
      profileUpdated: 'Ihr Profil wurde erfolgreich aktualisiert',
      passwordChanged: 'Ihr Passwort wurde erfolgreich ge√§ndert',
      languageUpdated: 'Die Sprache wurde aktualisiert',
      themeUpdated: 'Das Theme wurde aktualisiert',
      relayPointUpdated: 'Ihr bevorzugter Relaispunkt wurde aktualisiert',
      
      // Form Fields
      fullName: 'Vollst√§ndiger Name',
      email: 'E-Mail',
      phone: 'Telefon',
      currentPassword: 'Aktuelles Passwort',
      newPassword: 'Neues Passwort',
      confirmPassword: 'Neues Passwort best√§tigen',
      
      // Validation
      passwordMismatch: 'Passw√∂rter stimmen nicht √ºberein',
      passwordTooShort: 'Das Passwort muss mindestens 6 Zeichen lang sein',
      
      // Contact
      supportEmail: 'support@ihreapp.com',
      supportPhone: '+33 1 23 45 67 89',
      businessHours: 'Mo-Fr: 9-18 Uhr',
      
      // About
      appDescription: 'DeliveryApp ist Ihre vertrauensw√ºrdige Anwendung zum Senden und Empfangen von Paketen.',
      networkDescription: 'Wir erleichtern Ihre Sendungen durch unser Netzwerk von Partner-Relaispunkten in ganz Frankreich.',
      version: 'Version',
      developedBy: 'Entwickelt von',
      termsOfService: 'Nutzungsbedingungen',
      privacyPolicy: 'Datenschutzrichtlinie',
      
      // User Types
      client: 'Kunde',
      agency: 'Agentur',
    },
  }

export default translations













import React from 'react';
import { View, ScrollView, StyleSheet } from 'react-native';
import { List, RadioButton, Divider, Button, Text, Card, Title, Paragraph } from 'react-native-paper';
import { useTheme } from '../contexts/ThemeContext';
import { useLanguage } from '../contexts/LanguageContext';

const SettingsScreen: React.FC = () => {
  const { themeMode, setThemeMode, isDarkMode } = useTheme();
  const { currentLanguage, setLanguage, t, availableLanguages } = useLanguage();

  return (
    <ScrollView contentContainerStyle={styles.container}>
      {/* Theme Settings */}
      <List.Section>
        <List.Subheader>{t('theme')}</List.Subheader>
        <RadioButton.Group onValueChange={value => setThemeMode(value as any)} value={themeMode}>
          <View style={styles.row}>
            <RadioButton value="light" />
            <Text onPress={() => setThemeMode('light')} style={styles.label}>
              {t('lightTheme')}
            </Text>
          </View>
          <Divider />
          <View style={styles.row}>
            <RadioButton value="dark" />
            <Text onPress={() => setThemeMode('dark')} style={styles.label}>
              {t('darkTheme')}
            </Text>
          </View>
          <Divider />
          <View style={styles.row}>
            <RadioButton value="auto" />
            <Text onPress={() => setThemeMode('auto')} style={styles.label}>
              {t('autoTheme')}
            </Text>
          </View>
        </RadioButton.Group>
      </List.Section>

      <Divider style={styles.divider} />

      {/* Language Settings */}
      <List.Section>
        <List.Subheader>{t('language')}</List.Subheader>
        <RadioButton.Group onValueChange={value => setLanguage(value as any)} value={currentLanguage}>
          {availableLanguages.map(lang => (
            <View key={lang.code} style={styles.row}>
              <RadioButton value={lang.code} />
              <Text onPress={() => setLanguage(lang.code)} style={styles.label}>
                {lang.name}
              </Text>
            </View>
          ))}
        </RadioButton.Group>
      </List.Section>

      <Divider style={styles.divider} />

      {/* Preview Controls */}
      <Button mode="outlined" onPress={() => {}} style={styles.button}>
        {t('theme')}: {themeMode.toUpperCase()} | {t('language')}: {currentLanguage.toUpperCase()}
      </Button>

      {/* Preview Sample Texts */}
      <List.Section>
        <List.Subheader>Preview Samples</List.Subheader>
        <Card style={styles.card}>
          <Card.Content>
            <Title>{t('profile')}</Title>
            <Paragraph>{t('appDescription')}</Paragraph>
            <View style={styles.sampleButtons}>
              <Button mode="contained" style={styles.sampleButton}>{t('send')}</Button>
              <Button mode="outlined" style={styles.sampleButton}>{t('receive')}</Button>
            </View>
            <View style={styles.sampleButtons}>
              <Button>{t('track')}</Button>
            </View>
          </Card.Content>
        </Card>
      </List.Section>

      {/* Additional Text Tests */}
      <List.Section>
        <List.Subheader>Other Elements</List.Subheader>
        <Text style={styles.testText}>{t('helpCenter')}</Text>
        <Text style={styles.testText}>{t('contactUs')}</Text>
        <Text style={[styles.testText, { fontStyle: 'italic' }]}>{t('about')}</Text>
      </List.Section>
    </ScrollView>
  );
};




| Nom                  | Code Couleur | Observations                            |
| -------------------- | ------------ | --------------------------------------- |
| `onBackground`       | #E8E8E8    | Tr√®s clair, gris tr√®s p√¢le              |
| `onSurface`          | #E8E8E8    | M√™me teinte que `onBackground`, lisible |
| `onPrimaryContainer` | #FFE0B2    | Cr√®me tr√®s p√¢le, tirant vers le beige   |
| `onErrorContainer`   | #FFCDD2    | Rose tr√®s clair                         |
| `inverseSurface`     | #E8E8E8    | Idem, gris tr√®s clair                   |




// contexts/ThemeContext.tsx a √©t√© modifi√© pour 
// ajouter des th√®mes personnalis√©s

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react'
import { useColorScheme } from 'react-native'
import AsyncStorage from '@react-native-async-storage/async-storage'
import { MD3LightTheme, MD3DarkTheme, configureFonts, Provider as PaperProvider } from 'react-native-paper'

type ThemeMode = 'light' | 'dark' | 'auto'

interface ThemeContextType {
  themeMode: ThemeMode
  isDarkMode: boolean
  setThemeMode: (mode: ThemeMode) => void
  theme: typeof MD3LightTheme
}

{/** fermer car ca impacte un peu sur la lisibilit√© 

// Configuration des polices pour l'accessibilit√©
const fontConfig = {
  default: {
    fontFamily: "System",
    fontWeight: "400" as const,
  },
  bodySmall: {
    fontFamily: "System",
    fontSize: 14,
    fontWeight: "400" as const,
    lineHeight: 20,
  },
  bodyMedium: {
    fontFamily: "System",
    fontSize: 16,
    fontWeight: "400" as const,
    lineHeight: 24,
  },
  bodyLarge: {
    fontFamily: "System",
    fontSize: 18,
    fontWeight: "400" as const,
    lineHeight: 28,
  },
  headlineSmall: {
    fontFamily: "System",
    fontSize: 20,
    fontWeight: "500" as const,
    lineHeight: 28,
  },
  headlineMedium: {
    fontFamily: "System",
    fontSize: 24,
    fontWeight: "500" as const,
    lineHeight: 32,
  },
  headlineLarge: {
    fontFamily: "System",
    fontSize: 28,
    fontWeight: "500" as const,
    lineHeight: 36,
  },
  titleSmall: {
    fontFamily: "System",
    fontSize: 16,
    fontWeight: "500" as const,
    lineHeight: 24,
  },
  titleMedium: {
    fontFamily: "System",
    fontSize: 18,
    fontWeight: "500" as const,
    lineHeight: 28,
  },
  titleLarge: {
    fontFamily: "System",
    fontSize: 22,
    fontWeight: "500" as const,
    lineHeight: 32,
  },
  labelSmall: {
    fontFamily: "System",
    fontSize: 12,
    fontWeight: "500" as const,
    lineHeight: 16,
  },
  labelMedium: {
    fontFamily: "System",
    fontSize: 14,
    fontWeight: "500" as const,
    lineHeight: 20,
  },
  labelLarge: {
    fontFamily: "System",
    fontSize: 16,
    fontWeight: "500" as const,
    lineHeight: 24,
  },
}
 */}


// Th√®me clair
const lightTheme = {
  ...MD3LightTheme,
  colors: {
    ...MD3LightTheme.colors,
    // Couleurs principales
    primary: '#FF6B00',
    onPrimary: '#FFFFFF',
    primaryContainer: '#FFE5D1',
    onPrimaryContainer: '#B24A00',
    
    // Couleurs secondaires
    secondary: '#2196F3',
    onSecondary: '#FFFFFF',
    secondaryContainer: '#E3F2FD',
    onSecondaryContainer: '#1565C0',
    
    // Couleurs tertiaires
    tertiary: '#4CAF50',
    onTertiary: '#FFFFFF',
    tertiaryContainer: '#E8F5E8',
    onTertiaryContainer: '#2E7D32',
    
    // Couleurs d'erreur
    error: '#FF3B30',
    onError: '#FFFFFF',
    errorContainer: '#FFEBEE',
    onErrorContainer: '#C62828',
    
    // Couleurs de surface
    background: '#F5F5F5',
    onBackground: '#121212',
    surface: '#FFFFFF',
    onSurface: '#121212',
    surfaceVariant: '#F0F0F0',
    onSurfaceVariant: '#616161',
    
    // Couleurs de contour
    outline: '#E0E0E0',
    outlineVariant: '#F5F5F5',
    
    // Couleurs sp√©ciales
    inverseSurface: '#2E2E2E',
    inverseOnSurface: '#F5F5F5',
    inversePrimary: '#FF8F00',
    shadow: '#000000',
    scrim: '#000000',
    
    // Couleurs de surface avec √©l√©vation
    elevation: {
      level0: 'transparent',
      level1: '#FFFFFF',
      level2: '#FAFAFA',
      level3: '#F5F5F5',
      level4: '#F0F0F0',
      level5: '#EEEEEE',
    },
  },
  // fonts: configureFonts({ config: fontConfig }),
  roundness: 12,
}

// Th√®me sombre
const darkTheme = {
  ...MD3DarkTheme,
  colors: {
    ...MD3DarkTheme.colors,
    // Couleurs principales
    primary: '#FF8F00',
    onPrimary: '#000000',
    primaryContainer: '#E65100',
    onPrimaryContainer: '#FFE0B2',
    
    // Couleurs secondaires
    secondary: '#64B5F6',
    onSecondary: '#000000',
    secondaryContainer: '#1976D2',
    onSecondaryContainer: '#E3F2FD',
    
    // Couleurs tertiaires
    tertiary: '#81C784',
    onTertiary: '#000000',
    tertiaryContainer: '#388E3C',
    onTertiaryContainer: '#C8E6C9',
    
    // Couleurs d'erreur
    error: '#FF6B6B',
    onError: '#000000',
    errorContainer: '#D32F2F',
    onErrorContainer: '#FFCDD2',
    
    // Couleurs de surface
    background: '#0F0F0F',
    onBackground: '#E8E8E8',
    surface: '#1A1A1A',
    onSurface: '#FF6B00', // pour le texte
    surfaceVariant: '#2A2A2A',
    onSurfaceVariant: '#BDBDBD',
    
    // Couleurs de contour
    outline: '#424242',
    outlineVariant: '#2A2A2A',
    
    // Couleurs sp√©ciales
    inverseSurface: '#E8E8E8',
    inverseOnSurface: '#2A2A2A',
    inversePrimary: '#FF6B00',
    shadow: '#000000',
    scrim: '#000000',
    
    // Couleurs de surface avec √©l√©vation
    elevation: {
      level0: 'transparent',
      level1: '#1F1F1F',
      level2: '#242424',
      level3: '#2A2A2A',
      level4: '#2F2F2F',
      level5: '#333333',
    },
  },
  //fonts: configureFonts({ config: fontConfig }),
  roundness: 12,
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined)

interface ThemeProviderProps {
  children: ReactNode
}

export const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {
  const [themeMode, setThemeModeState] = useState<ThemeMode>('light')
  const systemColorScheme = useColorScheme()

  const isDarkMode = themeMode === 'dark' || (themeMode === 'auto' && systemColorScheme === 'dark')
  const theme = isDarkMode ? darkTheme : lightTheme

  useEffect(() => {
    loadThemePreference()
  }, [])

  const loadThemePreference = async () => {
    try {
      const savedTheme = await AsyncStorage.getItem('theme_preference')
      if (savedTheme && ['light', 'dark', 'auto'].includes(savedTheme)) {
        setThemeModeState(savedTheme as ThemeMode)
      }
    } catch (error) {
      console.error('Error loading theme preference:', error)
    }
  }

  const setThemeMode = async (mode: ThemeMode) => {
    try {
      await AsyncStorage.setItem('theme_preference', mode)
      setThemeModeState(mode)
    } catch (error) {
      console.error('Error saving theme preference:', error)
      // Fallback: set theme locally even if storage fails
      setThemeModeState(mode)
    }
  }

  const contextValue: ThemeContextType = {
    themeMode,
    isDarkMode,
    setThemeMode,
    theme,
  }

  return (
    <ThemeContext.Provider value={contextValue}>
      <PaperProvider theme={theme}>
        {children}
      </PaperProvider>
    </ThemeContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeContext)
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider')
  }
  return context
}

// Export des th√®mes pour usage externe si n√©cessaire
export { lightTheme, darkTheme }